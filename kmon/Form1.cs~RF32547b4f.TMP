using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Net.NetworkInformation;


namespace kmon
{
    public partial class frmMain : Form
    {

        public class Server
        {
            //Server name
            public string strServerName { get; set; }
            //Ping monitoring 
            public bool bPing { get; set; }
            //TCP Ports
            public int intPort1;
            public int intPort2;
            public int intPort3;
            public int intPort4;
            public int intPort5;
        }

        //Initialize a list of server objects
        List<Server> srvServer = new List<Server>();
        private bool bMonitor = false;
        
        public frmMain()
        {
            InitializeComponent();
            btnMonitor.BackColor = System.Drawing.Color.Red;
            btnMonitor.Text = "Not Monitoring";
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            frmAddServer frm2 = new frmAddServer();
            frm2.ShowDialog();
            //Prevent duplicates
            if (frmAddServer.strServerName == null || frmAddServer.strServerName == "") return;
            if (!lbServers.Items.Contains(frmAddServer.strServerName))
            {

                lbServers.Items.Add(frmAddServer.strServerName);

                srvServer.Add(new Server { strServerName = frmAddServer.strServerName,
                    bPing = false,
                    intPort1 = 0,
                    intPort2 = 0,
                    intPort3 = 0,
                    intPort4 = 0,
                    intPort5 = 0});
            }
            else
            {
                MessageBox.Show("Duplicate entry. Please re-enter.", "kmon");
            }            
        }

        private void btnRemove_Click(object sender, EventArgs e)
        {
            for (int intCounter = lbServers.SelectedIndices.Count - 1; intCounter >= 0; intCounter--)
            {
                int intIndex = lbServers.SelectedIndices[intCounter];
                lbServers.Items.RemoveAt(intIndex);
                srvServer.RemoveAt(intIndex);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (bMonitor)
            {
                bMonitor = false;
                btnMonitor.BackColor = System.Drawing.Color.Red;
                btnMonitor.Text = "Not Monitoring";
                timer1.Enabled = false;
            }
            else
            {
                bMonitor = true;
                btnMonitor.BackColor = System.Drawing.Color.Green;
                btnMonitor.Text = "Monitoring";
                timer1.Enabled = true;
            }
            for (int i = 0; i < srvServer.Count; i++)
            {
                //MessageBox.Show(srvServer[i].strServerName);
                bool bpingable = false;
                Ping pinger = new Ping();
                try
                {
                    PingReply prReply = pinger.Send(srvServer[i].strServerName);
                    bpingable = prReply.Status == IPStatus.Success;
                }
                catch (PingException ex)
                {
                    rtbLog.AppendText(ex.Message);
                }
            }

        }

        private void tbInterval_TextChanged(object sender, EventArgs e)
        {
            try
            {
                int intTimeInterval = Convert.ToInt32(tbInterval.Text.Trim());

            }
            catch (Exception)
            {
                tbInterval.Text = "5";
            }
            timer1.Interval = Convert.ToInt32(tbInterval.Text.Trim()) * 1000;
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            MessageBox.Show("sup!");
        }

        private void lbServers_SelectedIndexChanged(object sender, EventArgs e)
        {
            //MessageBox.Show("You clicked on " + lbServers.SelectedItem.ToString());
            try
            {
                tbPort1.Text = srvServer[lbServers.SelectedIndex].intPort1.ToString();
                tbPort2.Text = srvServer[lbServers.SelectedIndex].intPort2.ToString();
                tbPort3.Text = srvServer[lbServers.SelectedIndex].intPort3.ToString();
                tbPort4.Text = srvServer[lbServers.SelectedIndex].intPort4.ToString();
                tbPort5.Text = srvServer[lbServers.SelectedIndex].intPort5.ToString();
                cbPing.Checked = srvServer[lbServers.SelectedIndex].bPing;
            }
            catch (Exception)
            { }
            
        }

        private void tbPort1_TextChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            try
            {
                int intPort1 = Convert.ToInt32(tbPort1.Text.Trim());
            }
            catch (Exception)
            {
                return;
            }
            if (tbPort1.Text == null || tbPort1.Text == "") return;
            if ((intCheck > 1) || (intCheck == 0)) {
                tbPort1.Text = "0";
            }
            srvServer[lbServers.SelectedIndex].intPort1 = Convert.ToInt32(tbPort1.Text);            
        }

        private void tbPort2_TextChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            try
            {
                int intPort2 = Convert.ToInt32(tbPort2.Text.Trim());
            }
            catch (Exception)
            {
                return;
            }
            if (tbPort2.Text == null || tbPort2.Text == "") return;
            if ((intCheck > 1) || (intCheck == 0))
            {
                tbPort2.Text = "0";
            }
            srvServer[lbServers.SelectedIndex].intPort2 = Convert.ToInt32(tbPort2.Text);
        }

        private void tbPort3_TextChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            try
            {
                int intPort3 = Convert.ToInt32(tbPort1.Text.Trim());
            }
            catch (Exception)
            {
                return;
            }
            if (tbPort3.Text == null || tbPort3.Text == "") return;
            if ((intCheck > 1) || (intCheck == 0))
            {
                tbPort3.Text = "0";
            }
            srvServer[lbServers.SelectedIndex].intPort3 = Convert.ToInt32(tbPort3.Text);
        }

        private void tbPort4_TextChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            try
            {
                int intPort4 = Convert.ToInt32(tbPort1.Text.Trim());
            }
            catch (Exception)
            {
                return;
            }
            if (tbPort4.Text == null || tbPort1.Text == "") return;
            if ((intCheck > 1) || (intCheck == 0))
            {
                tbPort4.Text = "0";
            }
            srvServer[lbServers.SelectedIndex].intPort4 = Convert.ToInt32(tbPort4.Text);
        }

        private void tbPort5_TextChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            try
            {
                int intPort5 = Convert.ToInt32(tbPort1.Text.Trim());
            }
            catch (Exception)
            {
                return;
            }
            if (tbPort5.Text == null || tbPort5.Text == "") return;
            if ((intCheck > 1) || (intCheck == 0))
            {
                tbPort5.Text = "0";
            }
            srvServer[lbServers.SelectedIndex].intPort5 = Convert.ToInt32(tbPort5.Text);
        }

        private void tbPort1_KeyUp(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter) || (e.KeyCode == Keys.Return))
            {
                this.SelectNextControl((Control)sender, true, true, true, true);
            }
        }

        private void cbPing_CheckedChanged(object sender, EventArgs e)
        {
            int intCheck = lbServers.SelectedIndices.Count;
            if (lbServers.SelectedIndex == -1)
            {
                MessageBox.Show("You have to select a server on the left side", "Error");
                return;
            }
            srvServer[lbServers.SelectedIndex].bPing = cbPing.Checked;       
        }
    }
}
